name: Deploy Spring App

on:
  push:
    tags: 
      - "[0-9]+.[0-9]+.[0-9]+-[dp].[0-9]+"
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Resolve environment from tag
        id: env
        shell: bash
        run: |
          TAG="${GITHUB_REF##*/}"
          if [[ "$TAG" == *-d* ]]; then
            echo "ENV=DEV" >> $GITHUB_OUTPUT
          elif [[ "$TAG" == *-p* ]]; then
            echo "ENV=PROD" >> $GITHUB_OUTPUT
          else
            echo "Unsupported tag: $TAG"; exit 1
          fi
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV

      - name: Set EC2 connection info
        run: |
          echo "EC2_HOST=${{ secrets[format('{0}_EC2_HOST', steps.env.outputs.ENV)] }}" >> $GITHUB_ENV
          echo "EC2_SSH_KEY=${{ secrets[format('{0}_EC2_SSH_KEY', steps.env.outputs.ENV)] }}" >> $GITHUB_ENV
          echo "KAKAO_REDIRECT=${{ secrets[format('{0}_KAKAO_REDIRECT', steps.env.outputs.ENV)] }}" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      - run: chmod +x ./gradlew

      - name: Build JAR
        run: ./gradlew clean bootJar

      - name: Upload jar to S3
        run: |
          JAR_PATH=$(find build/libs -name "*.jar" | head -n 1)
          echo "Uploading $JAR_PATH"
          aws s3 cp "$JAR_PATH" s3://${{ secrets.S3_BUCKET_NAME }}/springboot/app.jar
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

      - name: Deploy to EC2 via SSH
        run: |
          echo "$EC2_SSH_KEY" | base64 -d > key.pem
          chmod 600 key.pem
          
          ssh -i key.pem -o StrictHostKeyChecking=no "ubuntu@$EC2_HOST" << 'EOF'
            set -e
          
            # 0) 디버그: 어떤 유저/디렉터리인지 확인
            whoami
            pwd
            ls -la /home/ubuntu || true
          
            # 1) 작업 디렉터리 보장
            mkdir -p /home/ubuntu/onuljang-backend
            cd /home/ubuntu/onuljang-backend
            echo "PWD=$(pwd)"
          
            # 2) 필요한 패키지 (aws cli 없으면 설치)
            if ! command -v aws >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y awscli
            fi
            if ! command -v java >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y openjdk-17-jre
            fi
          
            # 3) S3에서 JAR 다운
            echo "Downloading jar from S3..."
            aws s3 cp "s3://${S3_BUCKET_NAME}/springboot/app.jar" onuljang.jar
          
            # 4) 이전 프로세스 종료
            pkill -f 'onuljang.jar' || true
            sleep 1
          
            # 5) 환경변수 export 후 실행
            export DB_URL="${DB_URL}"
            export DB_USERNAME="${DB_USERNAME}"
            export DB_PASSWORD="${DB_PASSWORD}"
            export S3_BUCKET_NAME="${S3_BUCKET_NAME}"
            export KAKAO_REDIRECT="${KAKAO_REDIRECT}"
            export API_KAKAO_KEY="${API_KAKAO_KEY}"
          
            nohup java -jar onuljang.jar --server.port=8088 > app.log 2>&1 &
          
            echo "Tail last logs:"
            tail -n 50 app.log || true
          EOF

      - name: Health Check
        run: |
          HEALTH_URL="${{ secrets[format('{0}_HEALTH_URL', steps.env.outputs.ENV)] }}"
          
          ATTEMPTS=12   # 최대 1분
          SLEEP=5
          ok=false
          
          echo "Waiting for 200 from: $HEALTH_URL"
          for i in $(seq 1 $ATTEMPTS); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || true)
            if [ "$code" = "200" ]; then
              ok=true
              break
            fi
            sleep $SLEEP
          done
          
          if [ "$ok" != "true" ]; then
            echo "❌ Health check failed (timeout or non-200)"
            exit 1
          fi
          
          echo "✅ App is UP (200)"
    env:
      # ✅ GitHub Actions 쪽에서 원격으로 전달할 값들을 'env:'로 넘겨줌
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      API_KAKAO_KEY: ${{ secrets.API_KAKAO_KEY }}